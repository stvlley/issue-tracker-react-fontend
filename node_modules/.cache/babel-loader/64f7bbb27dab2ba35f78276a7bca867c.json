{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction useFetch(url) {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(null);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    setLoading(true);\n    axios.get(url).then(response => {\n      setData(response.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setLoading(false);\n    });\n  }, [url]);\n  return {\n    data,\n    loading,\n    error\n  };\n}\n\nexport default useFetch;","map":{"version":3,"sources":["/Users/stvlley/issue-tracker-react-frontend/src/useFetch.js"],"names":["useState","useEffect","axios","useFetch","url","data","setData","loading","setLoading","error","setError","get","then","response","catch","err","finally"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAEnB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,IAAD,CAAhC;AACA,QAAM,CAACO,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,IAAD,CAAtC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,KAAK,CACJS,GADD,CACKP,GADL,EAECQ,IAFD,CAEOC,QAAD,IAAc;AAClBP,MAAAA,OAAO,CAACO,QAAQ,CAACR,IAAV,CAAP;AACD,KAJD,EAKCS,KALD,CAKQC,GAAD,IAAS;AACdL,MAAAA,QAAQ,CAACK,GAAD,CAAR;AACD,KAPD,EAQCC,OARD,CAQS,MAAM;AACbR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD,KAVD;AAWD,GAbQ,EAaN,CAACJ,GAAD,CAbM,CAAT;AAgBF,SAAO;AAAEC,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA;AAAjB,GAAP;AACD;;AAED,eAAeN,QAAf","sourcesContent":["import {useState, useEffect} from 'react'\nimport axios from 'axios'\n\nfunction useFetch(url) {\n\n    const [data, setData] = useState(null)\n    const [loading, setLoading] = useState(null)\n    const [error, setError] = useState(null)\n\n    useEffect(() => {\n      setLoading(true)\n      axios\n      .get(url)\n      .then((response) => {\n        setData(response.data)\n      })\n      .catch((err) => {\n        setError(err)\n      })\n      .finally(() => {\n        setLoading(false)\n      })\n    }, [url])\n\n\n  return { data, loading, error}\n}\n\nexport default useFetch"]},"metadata":{},"sourceType":"module"}